{"version":3,"sources":["icon.js","components/ImageCropModal.js","helpers/imagehelper.js","App.js","serviceWorker.js","index.js"],"names":["handUp","xmlns","viewBox","d","times","check","download","file","ImageCropModal","props","setImageRef","elem","imageRef","handleOnImageLoaded","image","style","maxHeight","cropContainer","current","getBoundingClientRect","height","setState","crop","width","unit","x","y","handleOnImageError","e","console","log","handleOnCropChange","handleOnCropComplete","pixelCrop","handleCropApproval","canvasRef","canvas","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","imagetoCanvas","state","onCropResult","handleExit","onExit","React","createRef","imgSrc","imageSrc","this","reader","FileReader","addEventListener","result","readAsDataURL","className","onClick","ref","src","onImageLoaded","onImageError","onChange","onComplete","Component","App","useRef","useState","imageInput","setImageInput","name","type","fileProps","setFileProps","showCanvas","setShowCanvas","uploadBox","onInput","target","files","value","undefined","indexOf","alert","replace","accept","ImageViewBox","ImageCropModalBox","valid","imageData","filename","element","document","createElement","setAttribute","display","body","appendChild","click","removeChild","downloadImage","toDataURL","split","newFile","base64String","arr","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","base64StringtoFile","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86f8926d.chunk.js","sourcesContent":["/*\r\nicon credits to 1con8 https://icons8.com/line-awesome\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nexport const handUp = <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M 13 2 C 11.355469 2 10 3.355469 10 5 L 10 16.8125 L 9.34375 16.125 L 9.09375 15.90625 C 7.941406 14.753906 6.058594 14.753906 4.90625 15.90625 C 3.753906 17.058594 3.753906 18.941406 4.90625 20.09375 L 4.90625 20.125 L 13.09375 28.21875 L 13.15625 28.25 L 13.1875 28.3125 C 14.535156 29.324219 16.253906 30 18.1875 30 L 19.90625 30 C 24.441406 30 28.09375 26.347656 28.09375 21.8125 L 28.09375 14 C 28.09375 12.355469 26.738281 11 25.09375 11 C 24.667969 11 24.273438 11.117188 23.90625 11.28125 C 23.578125 9.980469 22.394531 9 21 9 C 20.234375 9 19.53125 9.300781 19 9.78125 C 18.46875 9.300781 17.765625 9 17 9 C 16.648438 9 16.316406 9.074219 16 9.1875 L 16 5 C 16 3.355469 14.644531 2 13 2 Z M 13 4 C 13.554688 4 14 4.445313 14 5 L 14 16 L 16 16 L 16 12 C 16 11.445313 16.445313 11 17 11 C 17.554688 11 18 11.445313 18 12 L 18 16 L 20 16 L 20 12 C 20 11.445313 20.445313 11 21 11 C 21.554688 11 22 11.445313 22 12 L 22 16 L 24.09375 16 L 24.09375 14 C 24.09375 13.445313 24.539063 13 25.09375 13 C 25.648438 13 26.09375 13.445313 26.09375 14 L 26.09375 21.8125 C 26.09375 25.277344 23.371094 28 19.90625 28 L 18.1875 28 C 16.722656 28 15.457031 27.476563 14.40625 26.6875 L 6.3125 18.6875 C 5.867188 18.242188 5.867188 17.757813 6.3125 17.3125 C 6.757813 16.867188 7.242188 16.867188 7.6875 17.3125 L 12 21.625 L 12 5 C 12 4.445313 12.445313 4 13 4 Z\"/></svg>;\r\nexport const times = <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M 7.21875 5.78125 L 5.78125 7.21875 L 14.5625 16 L 5.78125 24.78125 L 7.21875 26.21875 L 16 17.4375 L 24.78125 26.21875 L 26.21875 24.78125 L 17.4375 16 L 26.21875 7.21875 L 24.78125 5.78125 L 16 14.5625 Z\"/></svg>;\r\nexport const check = <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M 28.28125 6.28125 L 11 23.5625 L 3.71875 16.28125 L 2.28125 17.71875 L 10.28125 25.71875 L 11 26.40625 L 11.71875 25.71875 L 29.71875 7.71875 Z\"/></svg>;\r\nexport const download = <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M 15 4 L 15 20.5625 L 9.71875 15.28125 L 8.28125 16.71875 L 15.28125 23.71875 L 16 24.40625 L 16.71875 23.71875 L 23.71875 16.71875 L 22.28125 15.28125 L 17 20.5625 L 17 4 Z M 7 26 L 7 28 L 25 28 L 25 26 Z\"/></svg>;\r\nexport const file = <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\"><path d=\"M 6 3 L 6 29 L 26 29 L 26 9.59375 L 25.71875 9.28125 L 19.71875 3.28125 L 19.40625 3 Z M 8 5 L 18 5 L 18 11 L 24 11 L 24 27 L 8 27 Z M 20 6.4375 L 22.5625 9 L 20 9 Z M 11 13 L 11 15 L 21 15 L 21 13 Z M 11 17 L 11 19 L 21 19 L 21 17 Z M 11 21 L 11 23 L 21 23 L 21 21 Z\"/></svg>;","import React from 'react';\r\nimport './imagecropmodal.css';\r\nimport ReactImageCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport { check, times } from '../icon';\r\nimport { imagetoCanvas } from '../helpers/imagehelper';\r\n\r\nclass ImageCropModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.imageRef = null;\r\n        this.cropContainer = React.createRef(null);\r\n        this.state = {\r\n            imgSrc: null,\r\n            crop: {\r\n                unit: 'px'\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // extract the file\r\n        const { imageSrc } = this.props;\r\n        const reader = new FileReader();\r\n        reader.addEventListener(\"load\", () => {\r\n            this.setState({ imgSrc: reader.result })\r\n        }, false);\r\n        // create a base64 image file\r\n        reader.readAsDataURL(imageSrc);\r\n    }\r\n\r\n    setImageRef = elem => this.imageRef = elem;\r\n\r\n    // handlers for imagecrop utilities\r\n    handleOnImageLoaded = (image) => {\r\n        this.setImageRef(image);\r\n        this.imageRef.style.maxHeight = this.cropContainer.current.getBoundingClientRect().height + 'px';\r\n        this.setState({\r\n            crop: { \r\n                height: image.height - 20, \r\n                width: image.width - 20, \r\n                unit: \"px\",\r\n                x: 10,\r\n                y: 10\r\n            }\r\n        });\r\n        return false;\r\n    }\r\n\r\n    handleOnImageError = (e) => {\r\n        console.log(\"could not load the image\");\r\n    }\r\n\r\n    handleOnCropChange = (crop) => {\r\n        this.setState({ crop: crop })\r\n    }\r\n\r\n    handleOnCropComplete = (crop, pixelCrop) => {\r\n        // console.log(crop, pixelCrop);\r\n        this.setState({ crop: crop })\r\n    }\r\n\r\n    // handler for crop components\r\n    handleCropApproval = () => {\r\n        const { canvasRef } = this.props;\r\n        if (canvasRef && canvasRef.current) {\r\n            imagetoCanvas(canvasRef.current, this.imageRef, this.state.crop)\r\n            this.props.onCropResult(true);\r\n        } else { this.props.onCropResult(false) }\r\n        this.handleExit();\r\n    }\r\n\r\n    handleExit = () => {\r\n        this.props.onExit()\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"image-modal\">\r\n                <div className=\"image-crop-bx\">\r\n                    <div className=\"modal-toolbar\">\r\n                        <span onClick={this.handleExit}>{ times }</span>\r\n                        <span onClick={this.handleCropApproval}>{ check }</span>\r\n                    </div>\r\n                    <div className=\"modal-crop-bx\" ref={this.cropContainer}>\r\n                        <ReactImageCrop \r\n                            src={this.state.imgSrc} \r\n                            crop={this.state.crop}\r\n                            onImageLoaded={this.handleOnImageLoaded}\r\n                            onImageError={this.handleOnImageError}\r\n                            onChange={this.handleOnCropChange}\r\n                            onComplete={this.handleOnCropComplete} />\r\n                    </div>\r\n                    \r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageCropModal;","export function imagetoCanvas(canvasRef, image, pixelCrop) {\r\n  const canvas = canvasRef // document.createElement('canvas');\r\n  const scaleX = image.naturalWidth / image.width;\r\n  const scaleY = image.naturalHeight / image.height;\r\n  canvas.width = pixelCrop.width;\r\n  canvas.height = pixelCrop.height;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.drawImage(\r\n    image,\r\n    pixelCrop.x * scaleX,\r\n    pixelCrop.y * scaleY,\r\n    pixelCrop.width * scaleX,\r\n    pixelCrop.height * scaleY,\r\n    0,\r\n    0,\r\n    pixelCrop.width,\r\n    pixelCrop.height\r\n  )\r\n}\r\n\r\nexport function downloadImage (imageData, filename) {\r\n  var element = document.createElement('a')\r\n  element.setAttribute('href', imageData)\r\n  element.setAttribute('download', filename)\r\n  element.style.display = 'none'\r\n  document.body.appendChild(element)\r\n  element.click()\r\n  document.body.removeChild(element)\r\n}\r\n\r\n\r\n// A few JavaScript Functions for Images and Files\r\n// Author: Justin Mitchel\r\n// Source: https://kirr.co/ndywes\r\n\r\n// Convert a Base64-encoded string to a File object\r\nexport function base64StringtoFile (base64String, filename) {\r\n  var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1],\r\n    bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n)\r\n  while (n--) {\r\n    u8arr[n] = bstr.charCodeAt(n)\r\n  }\r\n  return new File([u8arr], filename, {type: mime})\r\n}","import React from 'react';\nimport { download, file, handUp } from './icon';\nimport './App.css';\nimport ImageCropModal from './components/ImageCropModal';\nimport { downloadImage, base64StringtoFile } from './helpers/imagehelper';\n\nconst App = () => {\n  const canvasRef = React.useRef(null);\n  const [ imageInput, setImageInput ] = React.useState(null);\n  const [ fileProps, setFileProps ] = React.useState({ name: null, type: null })\n  const [ showCanvas, setShowCanvas ] = React.useState(false);\n\n  const handleModalExit = () => {\n    setImageInput(null)\n  }\n\n  const handleModalCropApproval = (valid) => {\n    setShowCanvas(valid)\n  }\n\n  const handleInput = (e) => {\n    console.log(e.target.files)\n    const { name, type } = e.target.files[0];\n    const supportedFormats = ['image/jpg','image/gif','image/png', 'image/jpeg'];\n    let file = (e.target.files ? e.target.files[0] :e.target.value || undefined);\n\n    if (file && file.type) {\n      if (supportedFormats.indexOf(file.type) < 0) {\n        alert('Only Images Supported!');\n      }\n      else {\n        setImageInput(e.target.files[0])\n        setFileProps({ name: name.replace(\" \", \"_\"), type })\n      }\n    }\n  }\n\n  const handleFileDownload = () => {\n    if (fileProps && (fileProps.name && fileProps.type)) {\n      const imageData = canvasRef.current.toDataURL(fileProps.type);\n      const fileName = `${fileProps.name}.${fileProps.type.split(\"/\")[1]}`;\n      downloadImage(imageData, fileName)\n    }\n  }\n\n  const consoleLogFile = () => {\n    if (fileProps && (fileProps.name && fileProps.type)) {\n      const imageData = canvasRef.current.toDataURL(fileProps.type);\n      const fileName = `${fileProps.name}.${fileProps.type.split(\"/\")[1]}`;\n      const newFile = base64StringtoFile(imageData, fileName);\n      console.log(newFile)\n    }\n  }\n\n  const uploadBox = (\n    <div className=\"upload-bx\">\n      <input type=\"file\" onInput={handleInput} accept=\"image/gif, image/jpeg, image/png, image/jpg\" />\n      <span>{ handUp }</span>\n      <span>Upload</span>\n    </div>\n  );\n\n  const ImageViewBox = (\n    <div><canvas ref={canvasRef}></canvas></div>\n  );\n\n  const ImageCropModalBox = (\n    <ImageCropModal \n        imageSrc={imageInput}\n        canvasRef={canvasRef}\n        onExit={handleModalExit}\n        onCropResult={handleModalCropApproval} ></ImageCropModal>\n    )\n\n  return (\n    <div className=\"App\">\n    {\n      !showCanvas ? (imageInput ? ImageCropModalBox : uploadBox) : <></>\n    } \n    <div className={`result-bx ${showCanvas ? 'show' : ''}`}>\n      { ImageViewBox }\n      <div className=\"crop-util\"> \n        <button onClick={() => {\n          setShowCanvas(false);\n          setFileProps({ name: null, type: null })\n        }}>clear</button>\n        <span onClick={handleFileDownload}>{ download }</span>\n        <span onClick={consoleLogFile}>{ file }</span>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}